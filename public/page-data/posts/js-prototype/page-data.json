{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/js-prototype/","webpackCompilationHash":"01b3b3d3db8da416f0fd","result":{"data":{"markdownRemark":{"id":"8f9a0118-f9d8-555c-b8d8-7fa65bc8aaa1","html":"<h3 id=\"javascript는-prototype-상속-언어이다\"><a href=\"#javascript%EB%8A%94-prototype-%EC%83%81%EC%86%8D-%EC%96%B8%EC%96%B4%EC%9D%B4%EB%8B%A4\" aria-label=\"javascript는 prototype 상속 언어이다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Javascript는 Prototype 상속 언어이다!</strong></h3>\n<figure>\n\t<blockquote>\n\t\t<p>\"Javascript는 프로토타입 상속에 <br>기반을 둔 객체 지향 언어이다.\"</p>\n\t\t<footer>\n\t\t\t<!-- <cite>— Aliquam tincidunt mauris eu risus.</cite> -->\n\t\t</footer>\n\t</blockquote>\n</figure>\n<p>이 말은 처음 Javascript를 배울 때 한번쯤은 듣게 되는 문구이다. <br>사실 JS를 접하게 되면 이 문구가 처음에는 와닿지도 않고 무슨 말인지도 잘 모른다.<br></p>\n<p>하지만 <u>JS를 깊이 배울수록 저 문구가 참 JS 본질을 꿰뚫는 핵심 문구라는 것을 느끼고 있다.</u><br>\nJava와 C++등 객체 지향 언어에서는 Class를 상속하기 위한 별도의 구문이 있다. <br>\n물론 ES6에 들어서 class라는 문법이 Javascript에 추가되었지만 Java나 C++와 같은 언어에서 사용하는 개념과는 다르다.<br></p>\n<p>내가 만든 객체가 어떻게 생성되고 어떤 과정을 거쳐서 사용할 수 있게 되는 것인지 아는 것은 정말 중요하다. <br>\n따라서 Prototype 생성을 포스팅하여 내 머릿속에 추상적으로 잡혀있는 Prototype에 대한 정리를 해두려고 한다.<br></p>\n<h3 id=\"프로토타입-체인\"><a href=\"#%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85-%EC%B2%B4%EC%9D%B8\" aria-label=\"프로토타입 체인 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로토타입 체인</h3>\n<p>모든 객체는 내부 프로퍼티 [[Prototype]]을 가지고 있다. 브라우저를 키고 아무 객체를 생성해보면 그 아래 __proto__가 있는 것을 볼 수 있을 것이다. <br>\n이 __proto__는 그 객체에게 상속을 해준 부모 객체를 가리킨다. 따라서 이 객체는 __proto__프로퍼티가 가리키는 부모 객체의 프로퍼티를 사용할 수 있다. 이를 <span class=\"color--red\">프로토타입 체인이라고 한다. <br>\n예시를 들어보면 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> personA <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n\tname<span class=\"token punctuation\">:</span><span class=\"token string\">\"John\"</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token function-variable function\">myName</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hello my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> personB <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\tname<span class=\"token punctuation\">:</span><span class=\"token string\">\"Yohan\"</span>\n<span class=\"token punctuation\">}</span>\npersonB<span class=\"token punctuation\">.</span>__ proto__ <span class=\"token operator\">=</span> personA<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> personC <span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\npersonC<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">=</span> personB<span class=\"token punctuation\">;</span>\npersonC<span class=\"token punctuation\">.</span><span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Hello my name is Yohan!\"</span></code></pre></div>\n<p>분명 PersonC에는 myName이라는 메소드가 없다. 그러나 어찌된 일인지 <code class=\"language-text\">&#39;my name is Yohan&#39;</code>이라는 콘솔 로그를 찍어낸다.<br></p>\n<p>이게 바로 프로토 체인이다.<br>\n우선 <strong>PersonC</strong>에서 찾아본 후 해당 메소드가 <strong>PersonC</strong>에 없으면 해당 proto의 부모인 <strong>PersonB</strong>로 간다. <br>만약 <strong>PersonB에서도</strong> 존재하지 않으면 <strong>PersonA에로</strong> 간다.<br> 이런 식으로 점점 올라가 최종으로 <strong>PersonA에</strong> 있는 <strong>myName 메소드를</strong> 호출하게 되는 것이다.<br></p>\n<p>하지만, 당연히 일반적으로 직접 <code class=\"language-text\">__proto__</code>를 써서 상속하지는 않는다. <br>\n두 가지의 방법이 있다.</p>\n<ul>\n<li>생성자(constructor)로 객체를 생성할 때 생성자의 prototype 프로퍼티에 추가하는 방법</li>\n<li>Object.create() 메서드로 상속을 받을 프로토 타입을 지정하여 객체를 생성하는 방법</li>\n</ul>\n<p>첫 번째 방법이 우리가 일반적으로 쓰는 방법이다. 즉, <code class=\"language-text\">new</code>를 사용하여 인스턴스를 생성하는 것이다. <br>\n그렇다면 <code class=\"language-text\">new</code>를 사용하면 어떤 과정이 내부에서 일어나서 상속을 하게 되는 것일까? JS는 다른 객체지향언어와 어떻게 다를까?<br></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">greet</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`Hello my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> and my age is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> personA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'27'</span><span class=\"token punctuation\">)</span>`</code></pre></div>\n<hr>\n<ol>\n<li>\n<p>빈 객체를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">Person.prototype</code>을 생성된 객체의 프로토타입으로 설정한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newObj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></code></pre></div>\n<p>그런데 이때 만약 Person.prototype이 가리카는 것이 객체가 아니라면 <code class=\"language-text\">Object.prototype</code>을 프로토타입으로 설정한다. <br><br></p>\n</li>\n<li>\n<p><strong>Person</strong>생성자를 실행하고 <strong>newObj</strong>를 초기화한다.<br> 이 때 <strong>this</strong>는 1에서 생성한 객체로 설정한다. 인수는 <strong>new</strong>연산자와 함께 사용한 인수를 그대로 사용한다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">Person</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">,</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>완성된 객체를 반환한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">return</span> newObj<span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>이런식으로 진행되는 것이다. 이처럼 생성자를 new로 하여 생성하게 되면 <br>\n<strong>객체 생성, 프로토타입 설정, 객체 초기화를 설정</strong>하게 된다.</p>","fields":{"slug":"/posts/js-prototype/","tagSlugs":["/tag/prototype/","/tag/javscript/","/tag/web-development/","/tag/프로토타입-체이닝/"]},"frontmatter":{"date":"2019-06-19","description":"Javascript는 Prototype 상속 언어이다!","tags":["Prototype","Javscript","Web Development","프로토타입 체이닝"],"title":"Javscript Prototype에 대하여 알아보자. (1)"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/js-prototype/"}}}